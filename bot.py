import os
import random
import logging
from flask import Flask, request, jsonify
import telebot
from telebot import types

# ==========================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==========================================
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
WEBHOOK_SECRET = os.environ['WEBHOOK_SECRET']
VERCEL_URL = os.environ.get('VERCEL_URL', 'https://pystzarabotaet.vercel.app')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ==========================================
# –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê
# ==========================================
SLOT_SYMBOLS = ['üçí', 'üçã', 'üçá', 'üçâ', 'üîî', 'üíé', '7Ô∏è‚É£', 'üê∂']
INITIAL_BALANCE = 1000
MIN_BET = 10
MAX_BET = 500

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
users_db = {}

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_db:
        users_db[user_id] = {
            'balance': INITIAL_BALANCE,
            'bet': 100
        }
    return users_db[user_id]

# ==========================================
# –í–ï–ë-–≠–ù–î–ü–û–ò–ù–¢–´
# ==========================================
@app.route('/')
def home():
    """–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "status": "running",
        "bot": "Dog House Slots",
        "domain": VERCEL_URL
    })

@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        "status": "ok",
        "telegram": "connected",
        "webhook": "active"
    })

@app.route('/api/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞")
        return jsonify({"error": "Unauthorized"}), 403
    
    try:
        update = telebot.types.Update.de_json(request.get_json())
        bot.process_new_updates([update])
        return jsonify({"status": "success"}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": "Internal server error"}), 500

# ==========================================
# –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# ==========================================
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = get_user(message.from_user.id)
        bot.send_message(
            message.chat.id,
            f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dog House Slots!\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n"
            f"ü™ô –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user['bet']} –º–æ–Ω–µ—Ç\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/spin - –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã\n"
            "/bet - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

@bot.message_handler(commands=['spin'])
def spin(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã"""
    try:
        user = get_user(message.from_user.id)
        
        if user['balance'] < user['bet']:
            return bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = [random.choice(SLOT_SYMBOLS) for _ in range(3)]
        win = 100 if len(set(result)) == 1 else 0  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        user['balance'] += win - user['bet']
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        bot.send_message(
            message.chat.id,
            f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {' '.join(result)}\n\n"
            f"üíé –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n\n"
            "–ï—â—ë —Ä–∞–∑? /spin",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ spin: {e}")

@bot.message_handler(commands=['bet'])
def change_bet(message):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"""
    try:
        user = get_user(message.from_user.id)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("-10", callback_data="bet_down"),
            types.InlineKeyboardButton(f"{user['bet']}", callback_data="bet_current"),
            types.InlineKeyboardButton("+10", callback_data="bet_up")
        )
        
        bot.send_message(
            message.chat.id,
            f"‚öôÔ∏è –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user['bet']} –º–æ–Ω–µ—Ç\n"
            f"–ú–∏–Ω–∏–º—É–º: {MIN_BET}, –ú–∞–∫—Å–∏–º—É–º: {MAX_BET}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ change_bet: {e}")

# ==========================================
# CALLBACK-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ==========================================
@bot.callback_query_handler(func=lambda call: call.data.startswith('bet_'))
def bet_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏"""
    try:
        user = get_user(call.from_user.id)
        action = call.data.split('_')[1]
        
        if action == 'up':
            user['bet'] = min(user['bet'] + 10, MAX_BET)
        elif action == 'down':
            user['bet'] = max(user['bet'] - 10, MIN_BET)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚öôÔ∏è –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {user['bet']} –º–æ–Ω–µ—Ç",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, f"–°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {user['bet']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ bet_callback: {e}")

# ==========================================
# –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê
# ==========================================
def setup_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        bot.remove_webhook()
        bot.set_webhook(
            url=f"{VERCEL_URL}/api/webhook",
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=True
        )
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {VERCEL_URL}/api/webhook")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ Vercel
if os.environ.get('VERCEL') == '1':
    setup_webhook()
else:
    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if __name__ == '__main__':
        bot.remove_webhook()
        bot.polling(none_stop=True)
